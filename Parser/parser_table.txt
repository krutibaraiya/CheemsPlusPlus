S $ SKIP -> SKIP
S id SKIP -> SKIP
S ( SKIP -> SKIP
S ) SKIP -> SKIP
S { SKIP -> SKIP
S } SKIP -> SKIP
S maimn S -> PROGRAM $
S inmt S -> PROGRAM $
S floamt S -> PROGRAM $
S strinmg S -> PROGRAM $
S chamr S -> PROGRAM $
S booml S -> PROGRAM $
S , SKIP -> SKIP
S ; SKIP -> SKIP
S cimn SKIP -> SKIP
S coumt SKIP -> SKIP
S returmn SKIP -> SKIP
S = SKIP -> SKIP
S imf SKIP -> SKIP
S imfel SKIP -> SKIP
S whimle SKIP -> SKIP
S int_literal SKIP -> SKIP
S float_literal SKIP -> SKIP
S char_literal SKIP -> SKIP
S string_literal SKIP -> SKIP
S trmue SKIP -> SKIP
S falmse SKIP -> SKIP
S < SKIP -> SKIP
S > SKIP -> SKIP
S <= SKIP -> SKIP
S >= SKIP -> SKIP
S == SKIP -> SKIP
S != SKIP -> SKIP
S & SKIP -> SKIP
S | SKIP -> SKIP
S ! SKIP -> SKIP
S + SKIP -> SKIP
S - SKIP -> SKIP
S ^ SKIP -> SKIP
S & SKIP -> SKIP
S | SKIP -> SKIP
S * SKIP -> SKIP
S / SKIP -> SKIP
S % SKIP -> SKIP
PROGRAM $ SYNCH -> SYNCH
PROGRAM id SKIP -> SKIP
PROGRAM ( SKIP -> SKIP
PROGRAM ) SKIP -> SKIP
PROGRAM { SKIP -> SKIP
PROGRAM } SKIP -> SKIP
PROGRAM maimn PROGRAM -> MAIN
PROGRAM inmt PROGRAM -> FUNCTION_LIST MAIN
PROGRAM floamt PROGRAM -> FUNCTION_LIST MAIN
PROGRAM strinmg PROGRAM -> FUNCTION_LIST MAIN
PROGRAM chamr PROGRAM -> FUNCTION_LIST MAIN
PROGRAM booml PROGRAM -> FUNCTION_LIST MAIN
PROGRAM , SKIP -> SKIP
PROGRAM ; SKIP -> SKIP
PROGRAM cimn SKIP -> SKIP
PROGRAM coumt SKIP -> SKIP
PROGRAM returmn SKIP -> SKIP
PROGRAM = SKIP -> SKIP
PROGRAM imf SKIP -> SKIP
PROGRAM imfel SKIP -> SKIP
PROGRAM whimle SKIP -> SKIP
PROGRAM int_literal SKIP -> SKIP
PROGRAM float_literal SKIP -> SKIP
PROGRAM char_literal SKIP -> SKIP
PROGRAM string_literal SKIP -> SKIP
PROGRAM trmue SKIP -> SKIP
PROGRAM falmse SKIP -> SKIP
PROGRAM < SKIP -> SKIP
PROGRAM > SKIP -> SKIP
PROGRAM <= SKIP -> SKIP
PROGRAM >= SKIP -> SKIP
PROGRAM == SKIP -> SKIP
PROGRAM != SKIP -> SKIP
PROGRAM & SKIP -> SKIP
PROGRAM | SKIP -> SKIP
PROGRAM ! SKIP -> SKIP
PROGRAM + SKIP -> SKIP
PROGRAM - SKIP -> SKIP
PROGRAM ^ SKIP -> SKIP
PROGRAM & SKIP -> SKIP
PROGRAM | SKIP -> SKIP
PROGRAM * SKIP -> SKIP
PROGRAM / SKIP -> SKIP
PROGRAM % SKIP -> SKIP
FUNCTION_LIST $ SKIP -> SKIP
FUNCTION_LIST id SKIP -> SKIP
FUNCTION_LIST ( SKIP -> SKIP
FUNCTION_LIST ) SKIP -> SKIP
FUNCTION_LIST { SKIP -> SKIP
FUNCTION_LIST } SKIP -> SKIP
FUNCTION_LIST maimn SYNCH -> SYNCH
FUNCTION_LIST inmt FUNCTION_LIST -> FIRST_FUNCTION MORE_FUNCTIONS
FUNCTION_LIST floamt FUNCTION_LIST -> FIRST_FUNCTION MORE_FUNCTIONS
FUNCTION_LIST strinmg FUNCTION_LIST -> FIRST_FUNCTION MORE_FUNCTIONS
FUNCTION_LIST chamr FUNCTION_LIST -> FIRST_FUNCTION MORE_FUNCTIONS
FUNCTION_LIST booml FUNCTION_LIST -> FIRST_FUNCTION MORE_FUNCTIONS
FUNCTION_LIST , SKIP -> SKIP
FUNCTION_LIST ; SKIP -> SKIP
FUNCTION_LIST cimn SKIP -> SKIP
FUNCTION_LIST coumt SKIP -> SKIP
FUNCTION_LIST returmn SKIP -> SKIP
FUNCTION_LIST = SKIP -> SKIP
FUNCTION_LIST imf SKIP -> SKIP
FUNCTION_LIST imfel SKIP -> SKIP
FUNCTION_LIST whimle SKIP -> SKIP
FUNCTION_LIST int_literal SKIP -> SKIP
FUNCTION_LIST float_literal SKIP -> SKIP
FUNCTION_LIST char_literal SKIP -> SKIP
FUNCTION_LIST string_literal SKIP -> SKIP
FUNCTION_LIST trmue SKIP -> SKIP
FUNCTION_LIST falmse SKIP -> SKIP
FUNCTION_LIST < SKIP -> SKIP
FUNCTION_LIST > SKIP -> SKIP
FUNCTION_LIST <= SKIP -> SKIP
FUNCTION_LIST >= SKIP -> SKIP
FUNCTION_LIST == SKIP -> SKIP
FUNCTION_LIST != SKIP -> SKIP
FUNCTION_LIST & SKIP -> SKIP
FUNCTION_LIST | SKIP -> SKIP
FUNCTION_LIST ! SKIP -> SKIP
FUNCTION_LIST + SKIP -> SKIP
FUNCTION_LIST - SKIP -> SKIP
FUNCTION_LIST ^ SKIP -> SKIP
FUNCTION_LIST & SKIP -> SKIP
FUNCTION_LIST | SKIP -> SKIP
FUNCTION_LIST * SKIP -> SKIP
FUNCTION_LIST / SKIP -> SKIP
FUNCTION_LIST % SKIP -> SKIP
FIRST_FUNCTION $ SKIP -> SKIP
FIRST_FUNCTION id SKIP -> SKIP
FIRST_FUNCTION ( SKIP -> SKIP
FIRST_FUNCTION ) SKIP -> SKIP
FIRST_FUNCTION { SKIP -> SKIP
FIRST_FUNCTION } SKIP -> SKIP
FIRST_FUNCTION maimn SYNCH -> SYNCH
FIRST_FUNCTION inmt FIRST_FUNCTION -> FIRST_FUNCTION_PRE FIRST_FUNCTION_POST
FIRST_FUNCTION floamt FIRST_FUNCTION -> FIRST_FUNCTION_PRE FIRST_FUNCTION_POST
FIRST_FUNCTION strinmg FIRST_FUNCTION -> FIRST_FUNCTION_PRE FIRST_FUNCTION_POST
FIRST_FUNCTION chamr FIRST_FUNCTION -> FIRST_FUNCTION_PRE FIRST_FUNCTION_POST
FIRST_FUNCTION booml FIRST_FUNCTION -> FIRST_FUNCTION_PRE FIRST_FUNCTION_POST
FIRST_FUNCTION , SKIP -> SKIP
FIRST_FUNCTION ; SKIP -> SKIP
FIRST_FUNCTION cimn SKIP -> SKIP
FIRST_FUNCTION coumt SKIP -> SKIP
FIRST_FUNCTION returmn SKIP -> SKIP
FIRST_FUNCTION = SKIP -> SKIP
FIRST_FUNCTION imf SKIP -> SKIP
FIRST_FUNCTION imfel SKIP -> SKIP
FIRST_FUNCTION whimle SKIP -> SKIP
FIRST_FUNCTION int_literal SKIP -> SKIP
FIRST_FUNCTION float_literal SKIP -> SKIP
FIRST_FUNCTION char_literal SKIP -> SKIP
FIRST_FUNCTION string_literal SKIP -> SKIP
FIRST_FUNCTION trmue SKIP -> SKIP
FIRST_FUNCTION falmse SKIP -> SKIP
FIRST_FUNCTION < SKIP -> SKIP
FIRST_FUNCTION > SKIP -> SKIP
FIRST_FUNCTION <= SKIP -> SKIP
FIRST_FUNCTION >= SKIP -> SKIP
FIRST_FUNCTION == SKIP -> SKIP
FIRST_FUNCTION != SKIP -> SKIP
FIRST_FUNCTION & SKIP -> SKIP
FIRST_FUNCTION | SKIP -> SKIP
FIRST_FUNCTION ! SKIP -> SKIP
FIRST_FUNCTION + SKIP -> SKIP
FIRST_FUNCTION - SKIP -> SKIP
FIRST_FUNCTION ^ SKIP -> SKIP
FIRST_FUNCTION & SKIP -> SKIP
FIRST_FUNCTION | SKIP -> SKIP
FIRST_FUNCTION * SKIP -> SKIP
FIRST_FUNCTION / SKIP -> SKIP
FIRST_FUNCTION % SKIP -> SKIP
FIRST_FUNCTION_PRE $ SKIP -> SKIP
FIRST_FUNCTION_PRE id SKIP -> SKIP
FIRST_FUNCTION_PRE ( SKIP -> SKIP
FIRST_FUNCTION_PRE ) SYNCH -> SYNCH
FIRST_FUNCTION_PRE { SKIP -> SKIP
FIRST_FUNCTION_PRE } SKIP -> SKIP
FIRST_FUNCTION_PRE maimn SKIP -> SKIP
FIRST_FUNCTION_PRE inmt FIRST_FUNCTION_PRE -> TYPE id (
FIRST_FUNCTION_PRE floamt FIRST_FUNCTION_PRE -> TYPE id (
FIRST_FUNCTION_PRE strinmg FIRST_FUNCTION_PRE -> TYPE id (
FIRST_FUNCTION_PRE chamr FIRST_FUNCTION_PRE -> TYPE id (
FIRST_FUNCTION_PRE booml FIRST_FUNCTION_PRE -> TYPE id (
FIRST_FUNCTION_PRE , SKIP -> SKIP
FIRST_FUNCTION_PRE ; SKIP -> SKIP
FIRST_FUNCTION_PRE cimn SKIP -> SKIP
FIRST_FUNCTION_PRE coumt SKIP -> SKIP
FIRST_FUNCTION_PRE returmn SKIP -> SKIP
FIRST_FUNCTION_PRE = SKIP -> SKIP
FIRST_FUNCTION_PRE imf SKIP -> SKIP
FIRST_FUNCTION_PRE imfel SKIP -> SKIP
FIRST_FUNCTION_PRE whimle SKIP -> SKIP
FIRST_FUNCTION_PRE int_literal SKIP -> SKIP
FIRST_FUNCTION_PRE float_literal SKIP -> SKIP
FIRST_FUNCTION_PRE char_literal SKIP -> SKIP
FIRST_FUNCTION_PRE string_literal SKIP -> SKIP
FIRST_FUNCTION_PRE trmue SKIP -> SKIP
FIRST_FUNCTION_PRE falmse SKIP -> SKIP
FIRST_FUNCTION_PRE < SKIP -> SKIP
FIRST_FUNCTION_PRE > SKIP -> SKIP
FIRST_FUNCTION_PRE <= SKIP -> SKIP
FIRST_FUNCTION_PRE >= SKIP -> SKIP
FIRST_FUNCTION_PRE == SKIP -> SKIP
FIRST_FUNCTION_PRE != SKIP -> SKIP
FIRST_FUNCTION_PRE & SKIP -> SKIP
FIRST_FUNCTION_PRE | SKIP -> SKIP
FIRST_FUNCTION_PRE ! SKIP -> SKIP
FIRST_FUNCTION_PRE + SKIP -> SKIP
FIRST_FUNCTION_PRE - SKIP -> SKIP
FIRST_FUNCTION_PRE ^ SKIP -> SKIP
FIRST_FUNCTION_PRE & SKIP -> SKIP
FIRST_FUNCTION_PRE | SKIP -> SKIP
FIRST_FUNCTION_PRE * SKIP -> SKIP
FIRST_FUNCTION_PRE / SKIP -> SKIP
FIRST_FUNCTION_PRE % SKIP -> SKIP
FIRST_FUNCTION_POST $ SKIP -> SKIP
FIRST_FUNCTION_POST id SKIP -> SKIP
FIRST_FUNCTION_POST ( SKIP -> SKIP
FIRST_FUNCTION_POST ) FIRST_FUNCTION_POST -> ) { STMTS }
FIRST_FUNCTION_POST { SKIP -> SKIP
FIRST_FUNCTION_POST } SKIP -> SKIP
FIRST_FUNCTION_POST maimn SYNCH -> SYNCH
FIRST_FUNCTION_POST inmt FIRST_FUNCTION_POST -> FORMAL_PARAMS ) { STMTS }
FIRST_FUNCTION_POST floamt FIRST_FUNCTION_POST -> FORMAL_PARAMS ) { STMTS }
FIRST_FUNCTION_POST strinmg FIRST_FUNCTION_POST -> FORMAL_PARAMS ) { STMTS }
FIRST_FUNCTION_POST chamr FIRST_FUNCTION_POST -> FORMAL_PARAMS ) { STMTS }
FIRST_FUNCTION_POST booml FIRST_FUNCTION_POST -> FORMAL_PARAMS ) { STMTS }
FIRST_FUNCTION_POST , SKIP -> SKIP
FIRST_FUNCTION_POST ; SKIP -> SKIP
FIRST_FUNCTION_POST cimn SKIP -> SKIP
FIRST_FUNCTION_POST coumt SKIP -> SKIP
FIRST_FUNCTION_POST returmn SKIP -> SKIP
FIRST_FUNCTION_POST = SKIP -> SKIP
FIRST_FUNCTION_POST imf SKIP -> SKIP
FIRST_FUNCTION_POST imfel SKIP -> SKIP
FIRST_FUNCTION_POST whimle SKIP -> SKIP
FIRST_FUNCTION_POST int_literal SKIP -> SKIP
FIRST_FUNCTION_POST float_literal SKIP -> SKIP
FIRST_FUNCTION_POST char_literal SKIP -> SKIP
FIRST_FUNCTION_POST string_literal SKIP -> SKIP
FIRST_FUNCTION_POST trmue SKIP -> SKIP
FIRST_FUNCTION_POST falmse SKIP -> SKIP
FIRST_FUNCTION_POST < SKIP -> SKIP
FIRST_FUNCTION_POST > SKIP -> SKIP
FIRST_FUNCTION_POST <= SKIP -> SKIP
FIRST_FUNCTION_POST >= SKIP -> SKIP
FIRST_FUNCTION_POST == SKIP -> SKIP
FIRST_FUNCTION_POST != SKIP -> SKIP
FIRST_FUNCTION_POST & SKIP -> SKIP
FIRST_FUNCTION_POST | SKIP -> SKIP
FIRST_FUNCTION_POST ! SKIP -> SKIP
FIRST_FUNCTION_POST + SKIP -> SKIP
FIRST_FUNCTION_POST - SKIP -> SKIP
FIRST_FUNCTION_POST ^ SKIP -> SKIP
FIRST_FUNCTION_POST & SKIP -> SKIP
FIRST_FUNCTION_POST | SKIP -> SKIP
FIRST_FUNCTION_POST * SKIP -> SKIP
FIRST_FUNCTION_POST / SKIP -> SKIP
FIRST_FUNCTION_POST % SKIP -> SKIP
MORE_FUNCTIONS $ SKIP -> SKIP
MORE_FUNCTIONS id SKIP -> SKIP
MORE_FUNCTIONS ( SKIP -> SKIP
MORE_FUNCTIONS ) SKIP -> SKIP
MORE_FUNCTIONS { SKIP -> SKIP
MORE_FUNCTIONS } SKIP -> SKIP
MORE_FUNCTIONS maimn MORE_FUNCTIONS -> ssc
MORE_FUNCTIONS inmt MORE_FUNCTIONS -> FIRST_FUNCTION
MORE_FUNCTIONS floamt MORE_FUNCTIONS -> FIRST_FUNCTION
MORE_FUNCTIONS strinmg MORE_FUNCTIONS -> FIRST_FUNCTION
MORE_FUNCTIONS chamr MORE_FUNCTIONS -> FIRST_FUNCTION
MORE_FUNCTIONS booml MORE_FUNCTIONS -> FIRST_FUNCTION
MORE_FUNCTIONS , SKIP -> SKIP
MORE_FUNCTIONS ; SKIP -> SKIP
MORE_FUNCTIONS cimn SKIP -> SKIP
MORE_FUNCTIONS coumt SKIP -> SKIP
MORE_FUNCTIONS returmn SKIP -> SKIP
MORE_FUNCTIONS = SKIP -> SKIP
MORE_FUNCTIONS imf SKIP -> SKIP
MORE_FUNCTIONS imfel SKIP -> SKIP
MORE_FUNCTIONS whimle SKIP -> SKIP
MORE_FUNCTIONS int_literal SKIP -> SKIP
MORE_FUNCTIONS float_literal SKIP -> SKIP
MORE_FUNCTIONS char_literal SKIP -> SKIP
MORE_FUNCTIONS string_literal SKIP -> SKIP
MORE_FUNCTIONS trmue SKIP -> SKIP
MORE_FUNCTIONS falmse SKIP -> SKIP
MORE_FUNCTIONS < SKIP -> SKIP
MORE_FUNCTIONS > SKIP -> SKIP
MORE_FUNCTIONS <= SKIP -> SKIP
MORE_FUNCTIONS >= SKIP -> SKIP
MORE_FUNCTIONS == SKIP -> SKIP
MORE_FUNCTIONS != SKIP -> SKIP
MORE_FUNCTIONS & SKIP -> SKIP
MORE_FUNCTIONS | SKIP -> SKIP
MORE_FUNCTIONS ! SKIP -> SKIP
MORE_FUNCTIONS + SKIP -> SKIP
MORE_FUNCTIONS - SKIP -> SKIP
MORE_FUNCTIONS ^ SKIP -> SKIP
MORE_FUNCTIONS & SKIP -> SKIP
MORE_FUNCTIONS | SKIP -> SKIP
MORE_FUNCTIONS * SKIP -> SKIP
MORE_FUNCTIONS / SKIP -> SKIP
MORE_FUNCTIONS % SKIP -> SKIP
MAIN $ SYNCH -> SYNCH
MAIN id SKIP -> SKIP
MAIN ( SKIP -> SKIP
MAIN ) SKIP -> SKIP
MAIN { SKIP -> SKIP
MAIN } SKIP -> SKIP
MAIN maimn MAIN -> maimn ( ) { STMTS }
MAIN inmt SKIP -> SKIP
MAIN floamt SKIP -> SKIP
MAIN strinmg SKIP -> SKIP
MAIN chamr SKIP -> SKIP
MAIN booml SKIP -> SKIP
MAIN , SKIP -> SKIP
MAIN ; SKIP -> SKIP
MAIN cimn SKIP -> SKIP
MAIN coumt SKIP -> SKIP
MAIN returmn SKIP -> SKIP
MAIN = SKIP -> SKIP
MAIN imf SKIP -> SKIP
MAIN imfel SKIP -> SKIP
MAIN whimle SKIP -> SKIP
MAIN int_literal SKIP -> SKIP
MAIN float_literal SKIP -> SKIP
MAIN char_literal SKIP -> SKIP
MAIN string_literal SKIP -> SKIP
MAIN trmue SKIP -> SKIP
MAIN falmse SKIP -> SKIP
MAIN < SKIP -> SKIP
MAIN > SKIP -> SKIP
MAIN <= SKIP -> SKIP
MAIN >= SKIP -> SKIP
MAIN == SKIP -> SKIP
MAIN != SKIP -> SKIP
MAIN & SKIP -> SKIP
MAIN | SKIP -> SKIP
MAIN ! SKIP -> SKIP
MAIN + SKIP -> SKIP
MAIN - SKIP -> SKIP
MAIN ^ SKIP -> SKIP
MAIN & SKIP -> SKIP
MAIN | SKIP -> SKIP
MAIN * SKIP -> SKIP
MAIN / SKIP -> SKIP
MAIN % SKIP -> SKIP
TYPE $ SKIP -> SKIP
TYPE id SYNCH -> SYNCH
TYPE ( SKIP -> SKIP
TYPE ) SKIP -> SKIP
TYPE { SKIP -> SKIP
TYPE } SKIP -> SKIP
TYPE maimn SKIP -> SKIP
TYPE inmt TYPE -> inmt
TYPE floamt TYPE -> floamt
TYPE strinmg TYPE -> strinmg
TYPE chamr TYPE -> chamr
TYPE booml TYPE -> booml
TYPE , SKIP -> SKIP
TYPE ; SKIP -> SKIP
TYPE cimn SKIP -> SKIP
TYPE coumt SKIP -> SKIP
TYPE returmn SKIP -> SKIP
TYPE = SKIP -> SKIP
TYPE imf SKIP -> SKIP
TYPE imfel SKIP -> SKIP
TYPE whimle SKIP -> SKIP
TYPE int_literal SKIP -> SKIP
TYPE float_literal SKIP -> SKIP
TYPE char_literal SKIP -> SKIP
TYPE string_literal SKIP -> SKIP
TYPE trmue SKIP -> SKIP
TYPE falmse SKIP -> SKIP
TYPE < SKIP -> SKIP
TYPE > SKIP -> SKIP
TYPE <= SKIP -> SKIP
TYPE >= SKIP -> SKIP
TYPE == SKIP -> SKIP
TYPE != SKIP -> SKIP
TYPE & SKIP -> SKIP
TYPE | SKIP -> SKIP
TYPE ! SKIP -> SKIP
TYPE + SKIP -> SKIP
TYPE - SKIP -> SKIP
TYPE ^ SKIP -> SKIP
TYPE & SKIP -> SKIP
TYPE | SKIP -> SKIP
TYPE * SKIP -> SKIP
TYPE / SKIP -> SKIP
TYPE % SKIP -> SKIP
FORMAL_PARAMS $ SKIP -> SKIP
FORMAL_PARAMS id SKIP -> SKIP
FORMAL_PARAMS ( SKIP -> SKIP
FORMAL_PARAMS ) SYNCH -> SYNCH
FORMAL_PARAMS { SKIP -> SKIP
FORMAL_PARAMS } SKIP -> SKIP
FORMAL_PARAMS maimn SKIP -> SKIP
FORMAL_PARAMS inmt FORMAL_PARAMS -> FORMAL_PARAMS_PRE FORMAL_PARAMS_POST
FORMAL_PARAMS floamt FORMAL_PARAMS -> FORMAL_PARAMS_PRE FORMAL_PARAMS_POST
FORMAL_PARAMS strinmg FORMAL_PARAMS -> FORMAL_PARAMS_PRE FORMAL_PARAMS_POST
FORMAL_PARAMS chamr FORMAL_PARAMS -> FORMAL_PARAMS_PRE FORMAL_PARAMS_POST
FORMAL_PARAMS booml FORMAL_PARAMS -> FORMAL_PARAMS_PRE FORMAL_PARAMS_POST
FORMAL_PARAMS , SKIP -> SKIP
FORMAL_PARAMS ; SKIP -> SKIP
FORMAL_PARAMS cimn SKIP -> SKIP
FORMAL_PARAMS coumt SKIP -> SKIP
FORMAL_PARAMS returmn SKIP -> SKIP
FORMAL_PARAMS = SKIP -> SKIP
FORMAL_PARAMS imf SKIP -> SKIP
FORMAL_PARAMS imfel SKIP -> SKIP
FORMAL_PARAMS whimle SKIP -> SKIP
FORMAL_PARAMS int_literal SKIP -> SKIP
FORMAL_PARAMS float_literal SKIP -> SKIP
FORMAL_PARAMS char_literal SKIP -> SKIP
FORMAL_PARAMS string_literal SKIP -> SKIP
FORMAL_PARAMS trmue SKIP -> SKIP
FORMAL_PARAMS falmse SKIP -> SKIP
FORMAL_PARAMS < SKIP -> SKIP
FORMAL_PARAMS > SKIP -> SKIP
FORMAL_PARAMS <= SKIP -> SKIP
FORMAL_PARAMS >= SKIP -> SKIP
FORMAL_PARAMS == SKIP -> SKIP
FORMAL_PARAMS != SKIP -> SKIP
FORMAL_PARAMS & SKIP -> SKIP
FORMAL_PARAMS | SKIP -> SKIP
FORMAL_PARAMS ! SKIP -> SKIP
FORMAL_PARAMS + SKIP -> SKIP
FORMAL_PARAMS - SKIP -> SKIP
FORMAL_PARAMS ^ SKIP -> SKIP
FORMAL_PARAMS & SKIP -> SKIP
FORMAL_PARAMS | SKIP -> SKIP
FORMAL_PARAMS * SKIP -> SKIP
FORMAL_PARAMS / SKIP -> SKIP
FORMAL_PARAMS % SKIP -> SKIP
FORMAL_PARAMS_POST $ SKIP -> SKIP
FORMAL_PARAMS_POST id SKIP -> SKIP
FORMAL_PARAMS_POST ( SKIP -> SKIP
FORMAL_PARAMS_POST ) FORMAL_PARAMS_POST -> ssc
FORMAL_PARAMS_POST { SKIP -> SKIP
FORMAL_PARAMS_POST } SKIP -> SKIP
FORMAL_PARAMS_POST maimn SKIP -> SKIP
FORMAL_PARAMS_POST inmt SKIP -> SKIP
FORMAL_PARAMS_POST floamt SKIP -> SKIP
FORMAL_PARAMS_POST strinmg SKIP -> SKIP
FORMAL_PARAMS_POST chamr SKIP -> SKIP
FORMAL_PARAMS_POST booml SKIP -> SKIP
FORMAL_PARAMS_POST , FORMAL_PARAMS_POST -> , FORMAL_PARAMS
FORMAL_PARAMS_POST ; SKIP -> SKIP
FORMAL_PARAMS_POST cimn SKIP -> SKIP
FORMAL_PARAMS_POST coumt SKIP -> SKIP
FORMAL_PARAMS_POST returmn SKIP -> SKIP
FORMAL_PARAMS_POST = SKIP -> SKIP
FORMAL_PARAMS_POST imf SKIP -> SKIP
FORMAL_PARAMS_POST imfel SKIP -> SKIP
FORMAL_PARAMS_POST whimle SKIP -> SKIP
FORMAL_PARAMS_POST int_literal SKIP -> SKIP
FORMAL_PARAMS_POST float_literal SKIP -> SKIP
FORMAL_PARAMS_POST char_literal SKIP -> SKIP
FORMAL_PARAMS_POST string_literal SKIP -> SKIP
FORMAL_PARAMS_POST trmue SKIP -> SKIP
FORMAL_PARAMS_POST falmse SKIP -> SKIP
FORMAL_PARAMS_POST < SKIP -> SKIP
FORMAL_PARAMS_POST > SKIP -> SKIP
FORMAL_PARAMS_POST <= SKIP -> SKIP
FORMAL_PARAMS_POST >= SKIP -> SKIP
FORMAL_PARAMS_POST == SKIP -> SKIP
FORMAL_PARAMS_POST != SKIP -> SKIP
FORMAL_PARAMS_POST & SKIP -> SKIP
FORMAL_PARAMS_POST | SKIP -> SKIP
FORMAL_PARAMS_POST ! SKIP -> SKIP
FORMAL_PARAMS_POST + SKIP -> SKIP
FORMAL_PARAMS_POST - SKIP -> SKIP
FORMAL_PARAMS_POST ^ SKIP -> SKIP
FORMAL_PARAMS_POST & SKIP -> SKIP
FORMAL_PARAMS_POST | SKIP -> SKIP
FORMAL_PARAMS_POST * SKIP -> SKIP
FORMAL_PARAMS_POST / SKIP -> SKIP
FORMAL_PARAMS_POST % SKIP -> SKIP
FORMAL_PARAMS_PRE $ SKIP -> SKIP
FORMAL_PARAMS_PRE id SKIP -> SKIP
FORMAL_PARAMS_PRE ( SKIP -> SKIP
FORMAL_PARAMS_PRE ) SYNCH -> SYNCH
FORMAL_PARAMS_PRE { SKIP -> SKIP
FORMAL_PARAMS_PRE } SKIP -> SKIP
FORMAL_PARAMS_PRE maimn SKIP -> SKIP
FORMAL_PARAMS_PRE inmt FORMAL_PARAMS_PRE -> TYPE id
FORMAL_PARAMS_PRE floamt FORMAL_PARAMS_PRE -> TYPE id
FORMAL_PARAMS_PRE strinmg FORMAL_PARAMS_PRE -> TYPE id
FORMAL_PARAMS_PRE chamr FORMAL_PARAMS_PRE -> TYPE id
FORMAL_PARAMS_PRE booml FORMAL_PARAMS_PRE -> TYPE id
FORMAL_PARAMS_PRE , SYNCH -> SYNCH
FORMAL_PARAMS_PRE ; SKIP -> SKIP
FORMAL_PARAMS_PRE cimn SKIP -> SKIP
FORMAL_PARAMS_PRE coumt SKIP -> SKIP
FORMAL_PARAMS_PRE returmn SKIP -> SKIP
FORMAL_PARAMS_PRE = SKIP -> SKIP
FORMAL_PARAMS_PRE imf SKIP -> SKIP
FORMAL_PARAMS_PRE imfel SKIP -> SKIP
FORMAL_PARAMS_PRE whimle SKIP -> SKIP
FORMAL_PARAMS_PRE int_literal SKIP -> SKIP
FORMAL_PARAMS_PRE float_literal SKIP -> SKIP
FORMAL_PARAMS_PRE char_literal SKIP -> SKIP
FORMAL_PARAMS_PRE string_literal SKIP -> SKIP
FORMAL_PARAMS_PRE trmue SKIP -> SKIP
FORMAL_PARAMS_PRE falmse SKIP -> SKIP
FORMAL_PARAMS_PRE < SKIP -> SKIP
FORMAL_PARAMS_PRE > SKIP -> SKIP
FORMAL_PARAMS_PRE <= SKIP -> SKIP
FORMAL_PARAMS_PRE >= SKIP -> SKIP
FORMAL_PARAMS_PRE == SKIP -> SKIP
FORMAL_PARAMS_PRE != SKIP -> SKIP
FORMAL_PARAMS_PRE & SKIP -> SKIP
FORMAL_PARAMS_PRE | SKIP -> SKIP
FORMAL_PARAMS_PRE ! SKIP -> SKIP
FORMAL_PARAMS_PRE + SKIP -> SKIP
FORMAL_PARAMS_PRE - SKIP -> SKIP
FORMAL_PARAMS_PRE ^ SKIP -> SKIP
FORMAL_PARAMS_PRE & SKIP -> SKIP
FORMAL_PARAMS_PRE | SKIP -> SKIP
FORMAL_PARAMS_PRE * SKIP -> SKIP
FORMAL_PARAMS_PRE / SKIP -> SKIP
FORMAL_PARAMS_PRE % SKIP -> SKIP
STMTS $ SKIP -> SKIP
STMTS id STMTS -> STMT_PRE STMT_POST
STMTS ( SKIP -> SKIP
STMTS ) SKIP -> SKIP
STMTS { SKIP -> SKIP
STMTS } SYNCH -> SYNCH
STMTS maimn SKIP -> SKIP
STMTS inmt STMTS -> STMT_PRE STMT_POST
STMTS floamt STMTS -> STMT_PRE STMT_POST
STMTS strinmg STMTS -> STMT_PRE STMT_POST
STMTS chamr STMTS -> STMT_PRE STMT_POST
STMTS booml STMTS -> STMT_PRE STMT_POST
STMTS , SKIP -> SKIP
STMTS ; SKIP -> SKIP
STMTS cimn STMTS -> STMT_PRE STMT_POST
STMTS coumt STMTS -> STMT_PRE STMT_POST
STMTS returmn STMTS -> STMT_PRE STMT_POST
STMTS = SKIP -> SKIP
STMTS imf STMTS -> STMT_PRE STMT_POST
STMTS imfel STMTS -> STMT_PRE STMT_POST
STMTS whimle STMTS -> STMT_PRE STMT_POST
STMTS int_literal SKIP -> SKIP
STMTS float_literal SKIP -> SKIP
STMTS char_literal SKIP -> SKIP
STMTS string_literal SKIP -> SKIP
STMTS trmue SKIP -> SKIP
STMTS falmse SKIP -> SKIP
STMTS < SKIP -> SKIP
STMTS > SKIP -> SKIP
STMTS <= SKIP -> SKIP
STMTS >= SKIP -> SKIP
STMTS == SKIP -> SKIP
STMTS != SKIP -> SKIP
STMTS & SKIP -> SKIP
STMTS | SKIP -> SKIP
STMTS ! SKIP -> SKIP
STMTS + SKIP -> SKIP
STMTS - SKIP -> SKIP
STMTS ^ SKIP -> SKIP
STMTS & SKIP -> SKIP
STMTS | SKIP -> SKIP
STMTS * SKIP -> SKIP
STMTS / SKIP -> SKIP
STMTS % SKIP -> SKIP
STMT_PRE $ SKIP -> SKIP
STMT_PRE id STMT_PRE -> STMT ;
STMT_PRE ( SKIP -> SKIP
STMT_PRE ) SKIP -> SKIP
STMT_PRE { SKIP -> SKIP
STMT_PRE } SYNCH -> SYNCH
STMT_PRE maimn SKIP -> SKIP
STMT_PRE inmt STMT_PRE -> STMT ;
STMT_PRE floamt STMT_PRE -> STMT ;
STMT_PRE strinmg STMT_PRE -> STMT ;
STMT_PRE chamr STMT_PRE -> STMT ;
STMT_PRE booml STMT_PRE -> STMT ;
STMT_PRE , SKIP -> SKIP
STMT_PRE ; SKIP -> SKIP
STMT_PRE cimn STMT_PRE -> STMT ;
STMT_PRE coumt STMT_PRE -> STMT ;
STMT_PRE returmn STMT_PRE -> STMT ;
STMT_PRE = SKIP -> SKIP
STMT_PRE imf STMT_PRE -> STMT ;
STMT_PRE imfel STMT_PRE -> STMT ;
STMT_PRE whimle STMT_PRE -> STMT ;
STMT_PRE int_literal SKIP -> SKIP
STMT_PRE float_literal SKIP -> SKIP
STMT_PRE char_literal SKIP -> SKIP
STMT_PRE string_literal SKIP -> SKIP
STMT_PRE trmue SKIP -> SKIP
STMT_PRE falmse SKIP -> SKIP
STMT_PRE < SKIP -> SKIP
STMT_PRE > SKIP -> SKIP
STMT_PRE <= SKIP -> SKIP
STMT_PRE >= SKIP -> SKIP
STMT_PRE == SKIP -> SKIP
STMT_PRE != SKIP -> SKIP
STMT_PRE & SKIP -> SKIP
STMT_PRE | SKIP -> SKIP
STMT_PRE ! SKIP -> SKIP
STMT_PRE + SKIP -> SKIP
STMT_PRE - SKIP -> SKIP
STMT_PRE ^ SKIP -> SKIP
STMT_PRE & SKIP -> SKIP
STMT_PRE | SKIP -> SKIP
STMT_PRE * SKIP -> SKIP
STMT_PRE / SKIP -> SKIP
STMT_PRE % SKIP -> SKIP
STMT_POST $ SKIP -> SKIP
STMT_POST id STMT_POST -> STMTS
STMT_POST ( SKIP -> SKIP
STMT_POST ) SKIP -> SKIP
STMT_POST { SKIP -> SKIP
STMT_POST } STMT_POST -> ssc
STMT_POST maimn SKIP -> SKIP
STMT_POST inmt STMT_POST -> STMTS
STMT_POST floamt STMT_POST -> STMTS
STMT_POST strinmg STMT_POST -> STMTS
STMT_POST chamr STMT_POST -> STMTS
STMT_POST booml STMT_POST -> STMTS
STMT_POST , SKIP -> SKIP
STMT_POST ; SKIP -> SKIP
STMT_POST cimn STMT_POST -> STMTS
STMT_POST coumt STMT_POST -> STMTS
STMT_POST returmn STMT_POST -> STMTS
STMT_POST = SKIP -> SKIP
STMT_POST imf STMT_POST -> STMTS
STMT_POST imfel STMT_POST -> STMTS
STMT_POST whimle STMT_POST -> STMTS
STMT_POST int_literal SKIP -> SKIP
STMT_POST float_literal SKIP -> SKIP
STMT_POST char_literal SKIP -> SKIP
STMT_POST string_literal SKIP -> SKIP
STMT_POST trmue SKIP -> SKIP
STMT_POST falmse SKIP -> SKIP
STMT_POST < SKIP -> SKIP
STMT_POST > SKIP -> SKIP
STMT_POST <= SKIP -> SKIP
STMT_POST >= SKIP -> SKIP
STMT_POST == SKIP -> SKIP
STMT_POST != SKIP -> SKIP
STMT_POST & SKIP -> SKIP
STMT_POST | SKIP -> SKIP
STMT_POST ! SKIP -> SKIP
STMT_POST + SKIP -> SKIP
STMT_POST - SKIP -> SKIP
STMT_POST ^ SKIP -> SKIP
STMT_POST & SKIP -> SKIP
STMT_POST | SKIP -> SKIP
STMT_POST * SKIP -> SKIP
STMT_POST / SKIP -> SKIP
STMT_POST % SKIP -> SKIP
STMT $ SKIP -> SKIP
STMT id STMT -> id = POS_4
STMT ( SKIP -> SKIP
STMT ) SKIP -> SKIP
STMT { SKIP -> SKIP
STMT } SKIP -> SKIP
STMT maimn SKIP -> SKIP
STMT inmt STMT -> TYPE id POS_3
STMT floamt STMT -> TYPE id POS_3
STMT strinmg STMT -> TYPE id POS_3
STMT chamr STMT -> TYPE id POS_3
STMT booml STMT -> TYPE id POS_3
STMT , SKIP -> SKIP
STMT ; SYNCH -> SYNCH
STMT cimn STMT -> cimn ( id )
STMT coumt STMT -> coumt ( PRINT_POST
STMT returmn STMT -> returmn RETURN_POST
STMT = SKIP -> SKIP
STMT imf STMT -> CONDITION_ST
STMT imfel STMT -> CONDITION_ST
STMT whimle STMT -> LOOP_ST
STMT int_literal SKIP -> SKIP
STMT float_literal SKIP -> SKIP
STMT char_literal SKIP -> SKIP
STMT string_literal SKIP -> SKIP
STMT trmue SKIP -> SKIP
STMT falmse SKIP -> SKIP
STMT < SKIP -> SKIP
STMT > SKIP -> SKIP
STMT <= SKIP -> SKIP
STMT >= SKIP -> SKIP
STMT == SKIP -> SKIP
STMT != SKIP -> SKIP
STMT & SKIP -> SKIP
STMT | SKIP -> SKIP
STMT ! SKIP -> SKIP
STMT + SKIP -> SKIP
STMT - SKIP -> SKIP
STMT ^ SKIP -> SKIP
STMT & SKIP -> SKIP
STMT | SKIP -> SKIP
STMT * SKIP -> SKIP
STMT / SKIP -> SKIP
STMT % SKIP -> SKIP
PRINT_POST $ SKIP -> SKIP
PRINT_POST id PRINT_POST -> id )
PRINT_POST ( SKIP -> SKIP
PRINT_POST ) SKIP -> SKIP
PRINT_POST { SKIP -> SKIP
PRINT_POST } SKIP -> SKIP
PRINT_POST maimn SKIP -> SKIP
PRINT_POST inmt SKIP -> SKIP
PRINT_POST floamt SKIP -> SKIP
PRINT_POST strinmg SKIP -> SKIP
PRINT_POST chamr SKIP -> SKIP
PRINT_POST booml SKIP -> SKIP
PRINT_POST , SKIP -> SKIP
PRINT_POST ; SYNCH -> SYNCH
PRINT_POST cimn SKIP -> SKIP
PRINT_POST coumt SKIP -> SKIP
PRINT_POST returmn SKIP -> SKIP
PRINT_POST = SKIP -> SKIP
PRINT_POST imf SKIP -> SKIP
PRINT_POST imfel SKIP -> SKIP
PRINT_POST whimle SKIP -> SKIP
PRINT_POST int_literal PRINT_POST -> LITERAL )
PRINT_POST float_literal PRINT_POST -> LITERAL )
PRINT_POST char_literal PRINT_POST -> LITERAL )
PRINT_POST string_literal PRINT_POST -> LITERAL )
PRINT_POST trmue PRINT_POST -> LITERAL )
PRINT_POST falmse PRINT_POST -> LITERAL )
PRINT_POST < SKIP -> SKIP
PRINT_POST > SKIP -> SKIP
PRINT_POST <= SKIP -> SKIP
PRINT_POST >= SKIP -> SKIP
PRINT_POST == SKIP -> SKIP
PRINT_POST != SKIP -> SKIP
PRINT_POST & SKIP -> SKIP
PRINT_POST | SKIP -> SKIP
PRINT_POST ! SKIP -> SKIP
PRINT_POST + SKIP -> SKIP
PRINT_POST - SKIP -> SKIP
PRINT_POST ^ SKIP -> SKIP
PRINT_POST & SKIP -> SKIP
PRINT_POST | SKIP -> SKIP
PRINT_POST * SKIP -> SKIP
PRINT_POST / SKIP -> SKIP
PRINT_POST % SKIP -> SKIP
RETURN_POST $ SKIP -> SKIP
RETURN_POST id RETURN_POST -> id
RETURN_POST ( SKIP -> SKIP
RETURN_POST ) SKIP -> SKIP
RETURN_POST { SKIP -> SKIP
RETURN_POST } SKIP -> SKIP
RETURN_POST maimn SKIP -> SKIP
RETURN_POST inmt SKIP -> SKIP
RETURN_POST floamt SKIP -> SKIP
RETURN_POST strinmg SKIP -> SKIP
RETURN_POST chamr SKIP -> SKIP
RETURN_POST booml SKIP -> SKIP
RETURN_POST , SKIP -> SKIP
RETURN_POST ; SYNCH -> SYNCH
RETURN_POST cimn SKIP -> SKIP
RETURN_POST coumt SKIP -> SKIP
RETURN_POST returmn SKIP -> SKIP
RETURN_POST = SKIP -> SKIP
RETURN_POST imf SKIP -> SKIP
RETURN_POST imfel SKIP -> SKIP
RETURN_POST whimle SKIP -> SKIP
RETURN_POST int_literal RETURN_POST -> LITERAL
RETURN_POST float_literal RETURN_POST -> LITERAL
RETURN_POST char_literal RETURN_POST -> LITERAL
RETURN_POST string_literal RETURN_POST -> LITERAL
RETURN_POST trmue RETURN_POST -> LITERAL
RETURN_POST falmse RETURN_POST -> LITERAL
RETURN_POST < SKIP -> SKIP
RETURN_POST > SKIP -> SKIP
RETURN_POST <= SKIP -> SKIP
RETURN_POST >= SKIP -> SKIP
RETURN_POST == SKIP -> SKIP
RETURN_POST != SKIP -> SKIP
RETURN_POST & SKIP -> SKIP
RETURN_POST | SKIP -> SKIP
RETURN_POST ! SKIP -> SKIP
RETURN_POST + SKIP -> SKIP
RETURN_POST - SKIP -> SKIP
RETURN_POST ^ SKIP -> SKIP
RETURN_POST & SKIP -> SKIP
RETURN_POST | SKIP -> SKIP
RETURN_POST * SKIP -> SKIP
RETURN_POST / SKIP -> SKIP
RETURN_POST % SKIP -> SKIP
POS_3 $ SKIP -> SKIP
POS_3 id SKIP -> SKIP
POS_3 ( SKIP -> SKIP
POS_3 ) SKIP -> SKIP
POS_3 { SKIP -> SKIP
POS_3 } SKIP -> SKIP
POS_3 maimn SKIP -> SKIP
POS_3 inmt SKIP -> SKIP
POS_3 floamt SKIP -> SKIP
POS_3 strinmg SKIP -> SKIP
POS_3 chamr SKIP -> SKIP
POS_3 booml SKIP -> SKIP
POS_3 , POS_3 -> VARLIST_POST
POS_3 ; POS_3 -> VARLIST_POST
POS_3 cimn SKIP -> SKIP
POS_3 coumt SKIP -> SKIP
POS_3 returmn SKIP -> SKIP
POS_3 = POS_3 -> = POS_4
POS_3 imf SKIP -> SKIP
POS_3 imfel SKIP -> SKIP
POS_3 whimle SKIP -> SKIP
POS_3 int_literal SKIP -> SKIP
POS_3 float_literal SKIP -> SKIP
POS_3 char_literal SKIP -> SKIP
POS_3 string_literal SKIP -> SKIP
POS_3 trmue SKIP -> SKIP
POS_3 falmse SKIP -> SKIP
POS_3 < SKIP -> SKIP
POS_3 > SKIP -> SKIP
POS_3 <= SKIP -> SKIP
POS_3 >= SKIP -> SKIP
POS_3 == SKIP -> SKIP
POS_3 != SKIP -> SKIP
POS_3 & SKIP -> SKIP
POS_3 | SKIP -> SKIP
POS_3 ! SKIP -> SKIP
POS_3 + SKIP -> SKIP
POS_3 - SKIP -> SKIP
POS_3 ^ SKIP -> SKIP
POS_3 & SKIP -> SKIP
POS_3 | SKIP -> SKIP
POS_3 * SKIP -> SKIP
POS_3 / SKIP -> SKIP
POS_3 % SKIP -> SKIP
POS_4 $ SKIP -> SKIP
POS_4 id POS_4 -> EXPR
POS_4 ( POS_4 -> EXPR
POS_4 ) SKIP -> SKIP
POS_4 { SKIP -> SKIP
POS_4 } SKIP -> SKIP
POS_4 maimn SKIP -> SKIP
POS_4 inmt SKIP -> SKIP
POS_4 floamt SKIP -> SKIP
POS_4 strinmg SKIP -> SKIP
POS_4 chamr SKIP -> SKIP
POS_4 booml SKIP -> SKIP
POS_4 , SKIP -> SKIP
POS_4 ; SYNCH -> SYNCH
POS_4 cimn SKIP -> SKIP
POS_4 coumt SKIP -> SKIP
POS_4 returmn POS_4 -> returmn id ( POS_5
POS_4 = SKIP -> SKIP
POS_4 imf SKIP -> SKIP
POS_4 imfel SKIP -> SKIP
POS_4 whimle SKIP -> SKIP
POS_4 int_literal POS_4 -> EXPR
POS_4 float_literal POS_4 -> EXPR
POS_4 char_literal POS_4 -> EXPR
POS_4 string_literal POS_4 -> EXPR
POS_4 trmue POS_4 -> EXPR
POS_4 falmse POS_4 -> EXPR
POS_4 < SKIP -> SKIP
POS_4 > SKIP -> SKIP
POS_4 <= SKIP -> SKIP
POS_4 >= SKIP -> SKIP
POS_4 == SKIP -> SKIP
POS_4 != SKIP -> SKIP
POS_4 & SKIP -> SKIP
POS_4 | SKIP -> SKIP
POS_4 ! POS_4 -> EXPR
POS_4 + SKIP -> SKIP
POS_4 - SKIP -> SKIP
POS_4 ^ SKIP -> SKIP
POS_4 & SKIP -> SKIP
POS_4 | SKIP -> SKIP
POS_4 * SKIP -> SKIP
POS_4 / SKIP -> SKIP
POS_4 % SKIP -> SKIP
POS_5 $ SKIP -> SKIP
POS_5 id POS_5 -> ACTUAL_PARAMS )
POS_5 ( SKIP -> SKIP
POS_5 ) POS_5 -> )
POS_5 { SKIP -> SKIP
POS_5 } SKIP -> SKIP
POS_5 maimn SKIP -> SKIP
POS_5 inmt SKIP -> SKIP
POS_5 floamt SKIP -> SKIP
POS_5 strinmg SKIP -> SKIP
POS_5 chamr SKIP -> SKIP
POS_5 booml SKIP -> SKIP
POS_5 , SKIP -> SKIP
POS_5 ; SYNCH -> SYNCH
POS_5 cimn SKIP -> SKIP
POS_5 coumt SKIP -> SKIP
POS_5 returmn SKIP -> SKIP
POS_5 = SKIP -> SKIP
POS_5 imf SKIP -> SKIP
POS_5 imfel SKIP -> SKIP
POS_5 whimle SKIP -> SKIP
POS_5 int_literal POS_5 -> ACTUAL_PARAMS )
POS_5 float_literal POS_5 -> ACTUAL_PARAMS )
POS_5 char_literal POS_5 -> ACTUAL_PARAMS )
POS_5 string_literal POS_5 -> ACTUAL_PARAMS )
POS_5 trmue POS_5 -> ACTUAL_PARAMS )
POS_5 falmse POS_5 -> ACTUAL_PARAMS )
POS_5 < SKIP -> SKIP
POS_5 > SKIP -> SKIP
POS_5 <= SKIP -> SKIP
POS_5 >= SKIP -> SKIP
POS_5 == SKIP -> SKIP
POS_5 != SKIP -> SKIP
POS_5 & SKIP -> SKIP
POS_5 | SKIP -> SKIP
POS_5 ! SKIP -> SKIP
POS_5 + SKIP -> SKIP
POS_5 - SKIP -> SKIP
POS_5 ^ SKIP -> SKIP
POS_5 & SKIP -> SKIP
POS_5 | SKIP -> SKIP
POS_5 * SKIP -> SKIP
POS_5 / SKIP -> SKIP
POS_5 % SKIP -> SKIP
ACTUAL_PARAMS $ SKIP -> SKIP
ACTUAL_PARAMS id ACTUAL_PARAMS -> ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS ( SKIP -> SKIP
ACTUAL_PARAMS ) SYNCH -> SYNCH
ACTUAL_PARAMS { SKIP -> SKIP
ACTUAL_PARAMS } SKIP -> SKIP
ACTUAL_PARAMS maimn SKIP -> SKIP
ACTUAL_PARAMS inmt SKIP -> SKIP
ACTUAL_PARAMS floamt SKIP -> SKIP
ACTUAL_PARAMS strinmg SKIP -> SKIP
ACTUAL_PARAMS chamr SKIP -> SKIP
ACTUAL_PARAMS booml SKIP -> SKIP
ACTUAL_PARAMS , SKIP -> SKIP
ACTUAL_PARAMS ; SKIP -> SKIP
ACTUAL_PARAMS cimn SKIP -> SKIP
ACTUAL_PARAMS coumt SKIP -> SKIP
ACTUAL_PARAMS returmn SKIP -> SKIP
ACTUAL_PARAMS = SKIP -> SKIP
ACTUAL_PARAMS imf SKIP -> SKIP
ACTUAL_PARAMS imfel SKIP -> SKIP
ACTUAL_PARAMS whimle SKIP -> SKIP
ACTUAL_PARAMS int_literal ACTUAL_PARAMS -> ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS float_literal ACTUAL_PARAMS -> ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS char_literal ACTUAL_PARAMS -> ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS string_literal ACTUAL_PARAMS -> ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS trmue ACTUAL_PARAMS -> ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS falmse ACTUAL_PARAMS -> ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS < SKIP -> SKIP
ACTUAL_PARAMS > SKIP -> SKIP
ACTUAL_PARAMS <= SKIP -> SKIP
ACTUAL_PARAMS >= SKIP -> SKIP
ACTUAL_PARAMS == SKIP -> SKIP
ACTUAL_PARAMS != SKIP -> SKIP
ACTUAL_PARAMS & SKIP -> SKIP
ACTUAL_PARAMS | SKIP -> SKIP
ACTUAL_PARAMS ! SKIP -> SKIP
ACTUAL_PARAMS + SKIP -> SKIP
ACTUAL_PARAMS - SKIP -> SKIP
ACTUAL_PARAMS ^ SKIP -> SKIP
ACTUAL_PARAMS & SKIP -> SKIP
ACTUAL_PARAMS | SKIP -> SKIP
ACTUAL_PARAMS * SKIP -> SKIP
ACTUAL_PARAMS / SKIP -> SKIP
ACTUAL_PARAMS % SKIP -> SKIP
ACTUAL_PARAMS_PRE $ SKIP -> SKIP
ACTUAL_PARAMS_PRE id ACTUAL_PARAMS_PRE -> id
ACTUAL_PARAMS_PRE ( SKIP -> SKIP
ACTUAL_PARAMS_PRE ) SYNCH -> SYNCH
ACTUAL_PARAMS_PRE { SKIP -> SKIP
ACTUAL_PARAMS_PRE } SKIP -> SKIP
ACTUAL_PARAMS_PRE maimn SKIP -> SKIP
ACTUAL_PARAMS_PRE inmt SKIP -> SKIP
ACTUAL_PARAMS_PRE floamt SKIP -> SKIP
ACTUAL_PARAMS_PRE strinmg SKIP -> SKIP
ACTUAL_PARAMS_PRE chamr SKIP -> SKIP
ACTUAL_PARAMS_PRE booml SKIP -> SKIP
ACTUAL_PARAMS_PRE , SYNCH -> SYNCH
ACTUAL_PARAMS_PRE ; SKIP -> SKIP
ACTUAL_PARAMS_PRE cimn SKIP -> SKIP
ACTUAL_PARAMS_PRE coumt SKIP -> SKIP
ACTUAL_PARAMS_PRE returmn SKIP -> SKIP
ACTUAL_PARAMS_PRE = SKIP -> SKIP
ACTUAL_PARAMS_PRE imf SKIP -> SKIP
ACTUAL_PARAMS_PRE imfel SKIP -> SKIP
ACTUAL_PARAMS_PRE whimle SKIP -> SKIP
ACTUAL_PARAMS_PRE int_literal ACTUAL_PARAMS_PRE -> LITERAL
ACTUAL_PARAMS_PRE float_literal ACTUAL_PARAMS_PRE -> LITERAL
ACTUAL_PARAMS_PRE char_literal ACTUAL_PARAMS_PRE -> LITERAL
ACTUAL_PARAMS_PRE string_literal ACTUAL_PARAMS_PRE -> LITERAL
ACTUAL_PARAMS_PRE trmue ACTUAL_PARAMS_PRE -> LITERAL
ACTUAL_PARAMS_PRE falmse ACTUAL_PARAMS_PRE -> LITERAL
ACTUAL_PARAMS_PRE < SKIP -> SKIP
ACTUAL_PARAMS_PRE > SKIP -> SKIP
ACTUAL_PARAMS_PRE <= SKIP -> SKIP
ACTUAL_PARAMS_PRE >= SKIP -> SKIP
ACTUAL_PARAMS_PRE == SKIP -> SKIP
ACTUAL_PARAMS_PRE != SKIP -> SKIP
ACTUAL_PARAMS_PRE & SKIP -> SKIP
ACTUAL_PARAMS_PRE | SKIP -> SKIP
ACTUAL_PARAMS_PRE ! SKIP -> SKIP
ACTUAL_PARAMS_PRE + SKIP -> SKIP
ACTUAL_PARAMS_PRE - SKIP -> SKIP
ACTUAL_PARAMS_PRE ^ SKIP -> SKIP
ACTUAL_PARAMS_PRE & SKIP -> SKIP
ACTUAL_PARAMS_PRE | SKIP -> SKIP
ACTUAL_PARAMS_PRE * SKIP -> SKIP
ACTUAL_PARAMS_PRE / SKIP -> SKIP
ACTUAL_PARAMS_PRE % SKIP -> SKIP
ACTUAL_PARAMS_POST $ SKIP -> SKIP
ACTUAL_PARAMS_POST id SKIP -> SKIP
ACTUAL_PARAMS_POST ( SKIP -> SKIP
ACTUAL_PARAMS_POST ) ACTUAL_PARAMS_POST -> ssc
ACTUAL_PARAMS_POST { SKIP -> SKIP
ACTUAL_PARAMS_POST } SKIP -> SKIP
ACTUAL_PARAMS_POST maimn SKIP -> SKIP
ACTUAL_PARAMS_POST inmt SKIP -> SKIP
ACTUAL_PARAMS_POST floamt SKIP -> SKIP
ACTUAL_PARAMS_POST strinmg SKIP -> SKIP
ACTUAL_PARAMS_POST chamr SKIP -> SKIP
ACTUAL_PARAMS_POST booml SKIP -> SKIP
ACTUAL_PARAMS_POST , ACTUAL_PARAMS_POST -> , ACTUAL_PARAMS
ACTUAL_PARAMS_POST ; SKIP -> SKIP
ACTUAL_PARAMS_POST cimn SKIP -> SKIP
ACTUAL_PARAMS_POST coumt SKIP -> SKIP
ACTUAL_PARAMS_POST returmn SKIP -> SKIP
ACTUAL_PARAMS_POST = SKIP -> SKIP
ACTUAL_PARAMS_POST imf SKIP -> SKIP
ACTUAL_PARAMS_POST imfel SKIP -> SKIP
ACTUAL_PARAMS_POST whimle SKIP -> SKIP
ACTUAL_PARAMS_POST int_literal SKIP -> SKIP
ACTUAL_PARAMS_POST float_literal SKIP -> SKIP
ACTUAL_PARAMS_POST char_literal SKIP -> SKIP
ACTUAL_PARAMS_POST string_literal SKIP -> SKIP
ACTUAL_PARAMS_POST trmue SKIP -> SKIP
ACTUAL_PARAMS_POST falmse SKIP -> SKIP
ACTUAL_PARAMS_POST < SKIP -> SKIP
ACTUAL_PARAMS_POST > SKIP -> SKIP
ACTUAL_PARAMS_POST <= SKIP -> SKIP
ACTUAL_PARAMS_POST >= SKIP -> SKIP
ACTUAL_PARAMS_POST == SKIP -> SKIP
ACTUAL_PARAMS_POST != SKIP -> SKIP
ACTUAL_PARAMS_POST & SKIP -> SKIP
ACTUAL_PARAMS_POST | SKIP -> SKIP
ACTUAL_PARAMS_POST ! SKIP -> SKIP
ACTUAL_PARAMS_POST + SKIP -> SKIP
ACTUAL_PARAMS_POST - SKIP -> SKIP
ACTUAL_PARAMS_POST ^ SKIP -> SKIP
ACTUAL_PARAMS_POST & SKIP -> SKIP
ACTUAL_PARAMS_POST | SKIP -> SKIP
ACTUAL_PARAMS_POST * SKIP -> SKIP
ACTUAL_PARAMS_POST / SKIP -> SKIP
ACTUAL_PARAMS_POST % SKIP -> SKIP
VARLIST_POST $ SKIP -> SKIP
VARLIST_POST id SKIP -> SKIP
VARLIST_POST ( SKIP -> SKIP
VARLIST_POST ) SKIP -> SKIP
VARLIST_POST { SKIP -> SKIP
VARLIST_POST } SKIP -> SKIP
VARLIST_POST maimn SKIP -> SKIP
VARLIST_POST inmt SKIP -> SKIP
VARLIST_POST floamt SKIP -> SKIP
VARLIST_POST strinmg SKIP -> SKIP
VARLIST_POST chamr SKIP -> SKIP
VARLIST_POST booml SKIP -> SKIP
VARLIST_POST , VARLIST_POST -> , id VARLIST_POST
VARLIST_POST ; VARLIST_POST -> ssc
VARLIST_POST cimn SKIP -> SKIP
VARLIST_POST coumt SKIP -> SKIP
VARLIST_POST returmn SKIP -> SKIP
VARLIST_POST = SKIP -> SKIP
VARLIST_POST imf SKIP -> SKIP
VARLIST_POST imfel SKIP -> SKIP
VARLIST_POST whimle SKIP -> SKIP
VARLIST_POST int_literal SKIP -> SKIP
VARLIST_POST float_literal SKIP -> SKIP
VARLIST_POST char_literal SKIP -> SKIP
VARLIST_POST string_literal SKIP -> SKIP
VARLIST_POST trmue SKIP -> SKIP
VARLIST_POST falmse SKIP -> SKIP
VARLIST_POST < SKIP -> SKIP
VARLIST_POST > SKIP -> SKIP
VARLIST_POST <= SKIP -> SKIP
VARLIST_POST >= SKIP -> SKIP
VARLIST_POST == SKIP -> SKIP
VARLIST_POST != SKIP -> SKIP
VARLIST_POST & SKIP -> SKIP
VARLIST_POST | SKIP -> SKIP
VARLIST_POST ! SKIP -> SKIP
VARLIST_POST + SKIP -> SKIP
VARLIST_POST - SKIP -> SKIP
VARLIST_POST ^ SKIP -> SKIP
VARLIST_POST & SKIP -> SKIP
VARLIST_POST | SKIP -> SKIP
VARLIST_POST * SKIP -> SKIP
VARLIST_POST / SKIP -> SKIP
VARLIST_POST % SKIP -> SKIP
CONDITION_ST $ SKIP -> SKIP
CONDITION_ST id SKIP -> SKIP
CONDITION_ST ( SKIP -> SKIP
CONDITION_ST ) SKIP -> SKIP
CONDITION_ST { SKIP -> SKIP
CONDITION_ST } SKIP -> SKIP
CONDITION_ST maimn SKIP -> SKIP
CONDITION_ST inmt SKIP -> SKIP
CONDITION_ST floamt SKIP -> SKIP
CONDITION_ST strinmg SKIP -> SKIP
CONDITION_ST chamr SKIP -> SKIP
CONDITION_ST booml SKIP -> SKIP
CONDITION_ST , SKIP -> SKIP
CONDITION_ST ; SYNCH -> SYNCH
CONDITION_ST cimn SKIP -> SKIP
CONDITION_ST coumt SKIP -> SKIP
CONDITION_ST returmn SKIP -> SKIP
CONDITION_ST = SKIP -> SKIP
CONDITION_ST imf CONDITION_ST -> imf ( RELN_EXPR ) { STMTS }
CONDITION_ST imfel CONDITION_ST -> imfel ( RELN_EXPR ) { STMTS } { STMTS }
CONDITION_ST whimle SKIP -> SKIP
CONDITION_ST int_literal SKIP -> SKIP
CONDITION_ST float_literal SKIP -> SKIP
CONDITION_ST char_literal SKIP -> SKIP
CONDITION_ST string_literal SKIP -> SKIP
CONDITION_ST trmue SKIP -> SKIP
CONDITION_ST falmse SKIP -> SKIP
CONDITION_ST < SKIP -> SKIP
CONDITION_ST > SKIP -> SKIP
CONDITION_ST <= SKIP -> SKIP
CONDITION_ST >= SKIP -> SKIP
CONDITION_ST == SKIP -> SKIP
CONDITION_ST != SKIP -> SKIP
CONDITION_ST & SKIP -> SKIP
CONDITION_ST | SKIP -> SKIP
CONDITION_ST ! SKIP -> SKIP
CONDITION_ST + SKIP -> SKIP
CONDITION_ST - SKIP -> SKIP
CONDITION_ST ^ SKIP -> SKIP
CONDITION_ST & SKIP -> SKIP
CONDITION_ST | SKIP -> SKIP
CONDITION_ST * SKIP -> SKIP
CONDITION_ST / SKIP -> SKIP
CONDITION_ST % SKIP -> SKIP
LOOP_ST $ SKIP -> SKIP
LOOP_ST id SKIP -> SKIP
LOOP_ST ( SKIP -> SKIP
LOOP_ST ) SKIP -> SKIP
LOOP_ST { SKIP -> SKIP
LOOP_ST } SKIP -> SKIP
LOOP_ST maimn SKIP -> SKIP
LOOP_ST inmt SKIP -> SKIP
LOOP_ST floamt SKIP -> SKIP
LOOP_ST strinmg SKIP -> SKIP
LOOP_ST chamr SKIP -> SKIP
LOOP_ST booml SKIP -> SKIP
LOOP_ST , SKIP -> SKIP
LOOP_ST ; SYNCH -> SYNCH
LOOP_ST cimn SKIP -> SKIP
LOOP_ST coumt SKIP -> SKIP
LOOP_ST returmn SKIP -> SKIP
LOOP_ST = SKIP -> SKIP
LOOP_ST imf SKIP -> SKIP
LOOP_ST imfel SKIP -> SKIP
LOOP_ST whimle LOOP_ST -> whimle ( RELN_EXPR ) { STMTS }
LOOP_ST int_literal SKIP -> SKIP
LOOP_ST float_literal SKIP -> SKIP
LOOP_ST char_literal SKIP -> SKIP
LOOP_ST string_literal SKIP -> SKIP
LOOP_ST trmue SKIP -> SKIP
LOOP_ST falmse SKIP -> SKIP
LOOP_ST < SKIP -> SKIP
LOOP_ST > SKIP -> SKIP
LOOP_ST <= SKIP -> SKIP
LOOP_ST >= SKIP -> SKIP
LOOP_ST == SKIP -> SKIP
LOOP_ST != SKIP -> SKIP
LOOP_ST & SKIP -> SKIP
LOOP_ST | SKIP -> SKIP
LOOP_ST ! SKIP -> SKIP
LOOP_ST + SKIP -> SKIP
LOOP_ST - SKIP -> SKIP
LOOP_ST ^ SKIP -> SKIP
LOOP_ST & SKIP -> SKIP
LOOP_ST | SKIP -> SKIP
LOOP_ST * SKIP -> SKIP
LOOP_ST / SKIP -> SKIP
LOOP_ST % SKIP -> SKIP
LITERAL $ SKIP -> SKIP
LITERAL id SKIP -> SKIP
LITERAL ( SKIP -> SKIP
LITERAL ) SYNCH -> SYNCH
LITERAL { SKIP -> SKIP
LITERAL } SKIP -> SKIP
LITERAL maimn SKIP -> SKIP
LITERAL inmt SKIP -> SKIP
LITERAL floamt SKIP -> SKIP
LITERAL strinmg SKIP -> SKIP
LITERAL chamr SKIP -> SKIP
LITERAL booml SKIP -> SKIP
LITERAL , SYNCH -> SYNCH
LITERAL ; SYNCH -> SYNCH
LITERAL cimn SKIP -> SKIP
LITERAL coumt SKIP -> SKIP
LITERAL returmn SKIP -> SKIP
LITERAL = SKIP -> SKIP
LITERAL imf SKIP -> SKIP
LITERAL imfel SKIP -> SKIP
LITERAL whimle SKIP -> SKIP
LITERAL int_literal LITERAL -> int_literal
LITERAL float_literal LITERAL -> float_literal
LITERAL char_literal LITERAL -> char_literal
LITERAL string_literal LITERAL -> string_literal
LITERAL trmue LITERAL -> BOOL_LITERAL
LITERAL falmse LITERAL -> BOOL_LITERAL
LITERAL < SYNCH -> SYNCH
LITERAL > SYNCH -> SYNCH
LITERAL <= SYNCH -> SYNCH
LITERAL >= SYNCH -> SYNCH
LITERAL == SYNCH -> SYNCH
LITERAL != SYNCH -> SYNCH
LITERAL & SYNCH -> SYNCH
LITERAL | SYNCH -> SYNCH
LITERAL ! SKIP -> SKIP
LITERAL + SYNCH -> SYNCH
LITERAL - SYNCH -> SYNCH
LITERAL ^ SYNCH -> SYNCH
LITERAL & SYNCH -> SYNCH
LITERAL | SYNCH -> SYNCH
LITERAL * SYNCH -> SYNCH
LITERAL / SYNCH -> SYNCH
LITERAL % SYNCH -> SYNCH
BOOL_LITERAL $ SKIP -> SKIP
BOOL_LITERAL id SKIP -> SKIP
BOOL_LITERAL ( SKIP -> SKIP
BOOL_LITERAL ) SYNCH -> SYNCH
BOOL_LITERAL { SKIP -> SKIP
BOOL_LITERAL } SKIP -> SKIP
BOOL_LITERAL maimn SKIP -> SKIP
BOOL_LITERAL inmt SKIP -> SKIP
BOOL_LITERAL floamt SKIP -> SKIP
BOOL_LITERAL strinmg SKIP -> SKIP
BOOL_LITERAL chamr SKIP -> SKIP
BOOL_LITERAL booml SKIP -> SKIP
BOOL_LITERAL , SYNCH -> SYNCH
BOOL_LITERAL ; SYNCH -> SYNCH
BOOL_LITERAL cimn SKIP -> SKIP
BOOL_LITERAL coumt SKIP -> SKIP
BOOL_LITERAL returmn SKIP -> SKIP
BOOL_LITERAL = SKIP -> SKIP
BOOL_LITERAL imf SKIP -> SKIP
BOOL_LITERAL imfel SKIP -> SKIP
BOOL_LITERAL whimle SKIP -> SKIP
BOOL_LITERAL int_literal SKIP -> SKIP
BOOL_LITERAL float_literal SKIP -> SKIP
BOOL_LITERAL char_literal SKIP -> SKIP
BOOL_LITERAL string_literal SKIP -> SKIP
BOOL_LITERAL trmue BOOL_LITERAL -> trmue
BOOL_LITERAL falmse BOOL_LITERAL -> falmse
BOOL_LITERAL < SYNCH -> SYNCH
BOOL_LITERAL > SYNCH -> SYNCH
BOOL_LITERAL <= SYNCH -> SYNCH
BOOL_LITERAL >= SYNCH -> SYNCH
BOOL_LITERAL == SYNCH -> SYNCH
BOOL_LITERAL != SYNCH -> SYNCH
BOOL_LITERAL & SYNCH -> SYNCH
BOOL_LITERAL | SYNCH -> SYNCH
BOOL_LITERAL ! SKIP -> SKIP
BOOL_LITERAL + SYNCH -> SYNCH
BOOL_LITERAL - SYNCH -> SYNCH
BOOL_LITERAL ^ SYNCH -> SYNCH
BOOL_LITERAL & SYNCH -> SYNCH
BOOL_LITERAL | SYNCH -> SYNCH
BOOL_LITERAL * SYNCH -> SYNCH
BOOL_LITERAL / SYNCH -> SYNCH
BOOL_LITERAL % SYNCH -> SYNCH
REL_OP $ SKIP -> SKIP
REL_OP id SYNCH -> SYNCH
REL_OP ( SYNCH -> SYNCH
REL_OP ) SKIP -> SKIP
REL_OP { SKIP -> SKIP
REL_OP } SKIP -> SKIP
REL_OP maimn SKIP -> SKIP
REL_OP inmt SKIP -> SKIP
REL_OP floamt SKIP -> SKIP
REL_OP strinmg SKIP -> SKIP
REL_OP chamr SKIP -> SKIP
REL_OP booml SKIP -> SKIP
REL_OP , SKIP -> SKIP
REL_OP ; SKIP -> SKIP
REL_OP cimn SKIP -> SKIP
REL_OP coumt SKIP -> SKIP
REL_OP returmn SKIP -> SKIP
REL_OP = SKIP -> SKIP
REL_OP imf SKIP -> SKIP
REL_OP imfel SKIP -> SKIP
REL_OP whimle SKIP -> SKIP
REL_OP int_literal SYNCH -> SYNCH
REL_OP float_literal SYNCH -> SYNCH
REL_OP char_literal SYNCH -> SYNCH
REL_OP string_literal SYNCH -> SYNCH
REL_OP trmue SYNCH -> SYNCH
REL_OP falmse SYNCH -> SYNCH
REL_OP < REL_OP -> <
REL_OP > REL_OP -> >
REL_OP <= REL_OP -> <=
REL_OP >= REL_OP -> >=
REL_OP == REL_OP -> ==
REL_OP != REL_OP -> !=
REL_OP & SKIP -> SKIP
REL_OP | SKIP -> SKIP
REL_OP ! SYNCH -> SYNCH
REL_OP + SKIP -> SKIP
REL_OP - SKIP -> SKIP
REL_OP ^ SKIP -> SKIP
REL_OP & SKIP -> SKIP
REL_OP | SKIP -> SKIP
REL_OP * SKIP -> SKIP
REL_OP / SKIP -> SKIP
REL_OP % SKIP -> SKIP
LOG_OP $ SKIP -> SKIP
LOG_OP id SYNCH -> SYNCH
LOG_OP ( SYNCH -> SYNCH
LOG_OP ) SKIP -> SKIP
LOG_OP { SKIP -> SKIP
LOG_OP } SKIP -> SKIP
LOG_OP maimn SKIP -> SKIP
LOG_OP inmt SKIP -> SKIP
LOG_OP floamt SKIP -> SKIP
LOG_OP strinmg SKIP -> SKIP
LOG_OP chamr SKIP -> SKIP
LOG_OP booml SKIP -> SKIP
LOG_OP , SKIP -> SKIP
LOG_OP ; SKIP -> SKIP
LOG_OP cimn SKIP -> SKIP
LOG_OP coumt SKIP -> SKIP
LOG_OP returmn SKIP -> SKIP
LOG_OP = SKIP -> SKIP
LOG_OP imf SKIP -> SKIP
LOG_OP imfel SKIP -> SKIP
LOG_OP whimle SKIP -> SKIP
LOG_OP int_literal SYNCH -> SYNCH
LOG_OP float_literal SYNCH -> SYNCH
LOG_OP char_literal SYNCH -> SYNCH
LOG_OP string_literal SYNCH -> SYNCH
LOG_OP trmue SYNCH -> SYNCH
LOG_OP falmse SYNCH -> SYNCH
LOG_OP < SKIP -> SKIP
LOG_OP > SKIP -> SKIP
LOG_OP <= SKIP -> SKIP
LOG_OP >= SKIP -> SKIP
LOG_OP == SKIP -> SKIP
LOG_OP != SKIP -> SKIP
LOG_OP & LOG_OP -> &
LOG_OP | LOG_OP -> |
LOG_OP ! SYNCH -> SYNCH
LOG_OP + SKIP -> SKIP
LOG_OP - SKIP -> SKIP
LOG_OP ^ SKIP -> SKIP
LOG_OP & SKIP -> SKIP
LOG_OP | SKIP -> SKIP
LOG_OP * SKIP -> SKIP
LOG_OP / SKIP -> SKIP
LOG_OP % SKIP -> SKIP
RELN_EXPR $ SKIP -> SKIP
RELN_EXPR id RELN_EXPR -> EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR ( RELN_EXPR -> EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR ) SYNCH -> SYNCH
RELN_EXPR { SKIP -> SKIP
RELN_EXPR } SKIP -> SKIP
RELN_EXPR maimn SKIP -> SKIP
RELN_EXPR inmt SKIP -> SKIP
RELN_EXPR floamt SKIP -> SKIP
RELN_EXPR strinmg SKIP -> SKIP
RELN_EXPR chamr SKIP -> SKIP
RELN_EXPR booml SKIP -> SKIP
RELN_EXPR , SKIP -> SKIP
RELN_EXPR ; SKIP -> SKIP
RELN_EXPR cimn SKIP -> SKIP
RELN_EXPR coumt SKIP -> SKIP
RELN_EXPR returmn SKIP -> SKIP
RELN_EXPR = SKIP -> SKIP
RELN_EXPR imf SKIP -> SKIP
RELN_EXPR imfel SKIP -> SKIP
RELN_EXPR whimle SKIP -> SKIP
RELN_EXPR int_literal RELN_EXPR -> EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR float_literal RELN_EXPR -> EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR char_literal RELN_EXPR -> EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR string_literal RELN_EXPR -> EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR trmue RELN_EXPR -> EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR falmse RELN_EXPR -> EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR < SKIP -> SKIP
RELN_EXPR > SKIP -> SKIP
RELN_EXPR <= SKIP -> SKIP
RELN_EXPR >= SKIP -> SKIP
RELN_EXPR == SKIP -> SKIP
RELN_EXPR != SKIP -> SKIP
RELN_EXPR & SKIP -> SKIP
RELN_EXPR | SKIP -> SKIP
RELN_EXPR ! RELN_EXPR -> EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR + SKIP -> SKIP
RELN_EXPR - SKIP -> SKIP
RELN_EXPR ^ SKIP -> SKIP
RELN_EXPR & SKIP -> SKIP
RELN_EXPR | SKIP -> SKIP
RELN_EXPR * SKIP -> SKIP
RELN_EXPR / SKIP -> SKIP
RELN_EXPR % SKIP -> SKIP
RELN_EXPR' $ SKIP -> SKIP
RELN_EXPR' id SKIP -> SKIP
RELN_EXPR' ( SKIP -> SKIP
RELN_EXPR' ) RELN_EXPR' -> ssc
RELN_EXPR' { SKIP -> SKIP
RELN_EXPR' } SKIP -> SKIP
RELN_EXPR' maimn SKIP -> SKIP
RELN_EXPR' inmt SKIP -> SKIP
RELN_EXPR' floamt SKIP -> SKIP
RELN_EXPR' strinmg SKIP -> SKIP
RELN_EXPR' chamr SKIP -> SKIP
RELN_EXPR' booml SKIP -> SKIP
RELN_EXPR' , SKIP -> SKIP
RELN_EXPR' ; SKIP -> SKIP
RELN_EXPR' cimn SKIP -> SKIP
RELN_EXPR' coumt SKIP -> SKIP
RELN_EXPR' returmn SKIP -> SKIP
RELN_EXPR' = SKIP -> SKIP
RELN_EXPR' imf SKIP -> SKIP
RELN_EXPR' imfel SKIP -> SKIP
RELN_EXPR' whimle SKIP -> SKIP
RELN_EXPR' int_literal SKIP -> SKIP
RELN_EXPR' float_literal SKIP -> SKIP
RELN_EXPR' char_literal SKIP -> SKIP
RELN_EXPR' string_literal SKIP -> SKIP
RELN_EXPR' trmue SKIP -> SKIP
RELN_EXPR' falmse SKIP -> SKIP
RELN_EXPR' < SKIP -> SKIP
RELN_EXPR' > SKIP -> SKIP
RELN_EXPR' <= SKIP -> SKIP
RELN_EXPR' >= SKIP -> SKIP
RELN_EXPR' == SKIP -> SKIP
RELN_EXPR' != SKIP -> SKIP
RELN_EXPR' & RELN_EXPR' -> LOG_OP RELN_EXPR
RELN_EXPR' | RELN_EXPR' -> LOG_OP RELN_EXPR
RELN_EXPR' ! SKIP -> SKIP
RELN_EXPR' + SKIP -> SKIP
RELN_EXPR' - SKIP -> SKIP
RELN_EXPR' ^ SKIP -> SKIP
RELN_EXPR' & SKIP -> SKIP
RELN_EXPR' | SKIP -> SKIP
RELN_EXPR' * SKIP -> SKIP
RELN_EXPR' / SKIP -> SKIP
RELN_EXPR' % SKIP -> SKIP
EXPR $ SKIP -> SKIP
EXPR id EXPR -> TERM EXPR'
EXPR ( EXPR -> TERM EXPR'
EXPR ) SYNCH -> SYNCH
EXPR { SKIP -> SKIP
EXPR } SKIP -> SKIP
EXPR maimn SKIP -> SKIP
EXPR inmt SKIP -> SKIP
EXPR floamt SKIP -> SKIP
EXPR strinmg SKIP -> SKIP
EXPR chamr SKIP -> SKIP
EXPR booml SKIP -> SKIP
EXPR , SKIP -> SKIP
EXPR ; SYNCH -> SYNCH
EXPR cimn SKIP -> SKIP
EXPR coumt SKIP -> SKIP
EXPR returmn SKIP -> SKIP
EXPR = SKIP -> SKIP
EXPR imf SKIP -> SKIP
EXPR imfel SKIP -> SKIP
EXPR whimle SKIP -> SKIP
EXPR int_literal EXPR -> TERM EXPR'
EXPR float_literal EXPR -> TERM EXPR'
EXPR char_literal EXPR -> TERM EXPR'
EXPR string_literal EXPR -> TERM EXPR'
EXPR trmue EXPR -> TERM EXPR'
EXPR falmse EXPR -> TERM EXPR'
EXPR < SYNCH -> SYNCH
EXPR > SYNCH -> SYNCH
EXPR <= SYNCH -> SYNCH
EXPR >= SYNCH -> SYNCH
EXPR == SYNCH -> SYNCH
EXPR != SYNCH -> SYNCH
EXPR & SYNCH -> SYNCH
EXPR | SYNCH -> SYNCH
EXPR ! EXPR -> ! EXPR
EXPR + SKIP -> SKIP
EXPR - SKIP -> SKIP
EXPR ^ SKIP -> SKIP
EXPR & SKIP -> SKIP
EXPR | SKIP -> SKIP
EXPR * SKIP -> SKIP
EXPR / SKIP -> SKIP
EXPR % SKIP -> SKIP
EXPR' $ SKIP -> SKIP
EXPR' id SKIP -> SKIP
EXPR' ( SKIP -> SKIP
EXPR' ) EXPR' -> ssc
EXPR' { SKIP -> SKIP
EXPR' } SKIP -> SKIP
EXPR' maimn SKIP -> SKIP
EXPR' inmt SKIP -> SKIP
EXPR' floamt SKIP -> SKIP
EXPR' strinmg SKIP -> SKIP
EXPR' chamr SKIP -> SKIP
EXPR' booml SKIP -> SKIP
EXPR' , SKIP -> SKIP
EXPR' ; EXPR' -> ssc
EXPR' cimn SKIP -> SKIP
EXPR' coumt SKIP -> SKIP
EXPR' returmn SKIP -> SKIP
EXPR' = SKIP -> SKIP
EXPR' imf SKIP -> SKIP
EXPR' imfel SKIP -> SKIP
EXPR' whimle SKIP -> SKIP
EXPR' int_literal SKIP -> SKIP
EXPR' float_literal SKIP -> SKIP
EXPR' char_literal SKIP -> SKIP
EXPR' string_literal SKIP -> SKIP
EXPR' trmue SKIP -> SKIP
EXPR' falmse SKIP -> SKIP
EXPR' < EXPR' -> ssc
EXPR' > EXPR' -> ssc
EXPR' <= EXPR' -> ssc
EXPR' >= EXPR' -> ssc
EXPR' == EXPR' -> ssc
EXPR' != EXPR' -> ssc
EXPR' & EXPR' -> ssc
EXPR' | EXPR' -> ssc
EXPR' ! SKIP -> SKIP
EXPR' + EXPR' -> + TERM EXPR'
EXPR' - EXPR' -> - TERM EXPR'
EXPR' ^ EXPR' -> ^ TERM EXPR'
EXPR' & EXPR' -> & TERM EXPR'
EXPR' | EXPR' -> | TERM EXPR'
EXPR' * SKIP -> SKIP
EXPR' / SKIP -> SKIP
EXPR' % SKIP -> SKIP
TERM $ SKIP -> SKIP
TERM id TERM -> FACTOR TERM'
TERM ( TERM -> ( EXPR ) TERM'
TERM ) SYNCH -> SYNCH
TERM { SKIP -> SKIP
TERM } SKIP -> SKIP
TERM maimn SKIP -> SKIP
TERM inmt SKIP -> SKIP
TERM floamt SKIP -> SKIP
TERM strinmg SKIP -> SKIP
TERM chamr SKIP -> SKIP
TERM booml SKIP -> SKIP
TERM , SKIP -> SKIP
TERM ; SYNCH -> SYNCH
TERM cimn SKIP -> SKIP
TERM coumt SKIP -> SKIP
TERM returmn SKIP -> SKIP
TERM = SKIP -> SKIP
TERM imf SKIP -> SKIP
TERM imfel SKIP -> SKIP
TERM whimle SKIP -> SKIP
TERM int_literal TERM -> FACTOR TERM'
TERM float_literal TERM -> FACTOR TERM'
TERM char_literal TERM -> FACTOR TERM'
TERM string_literal TERM -> FACTOR TERM'
TERM trmue TERM -> FACTOR TERM'
TERM falmse TERM -> FACTOR TERM'
TERM < SYNCH -> SYNCH
TERM > SYNCH -> SYNCH
TERM <= SYNCH -> SYNCH
TERM >= SYNCH -> SYNCH
TERM == SYNCH -> SYNCH
TERM != SYNCH -> SYNCH
TERM & SYNCH -> SYNCH
TERM | SYNCH -> SYNCH
TERM ! SKIP -> SKIP
TERM + SYNCH -> SYNCH
TERM - SYNCH -> SYNCH
TERM ^ SYNCH -> SYNCH
TERM & SYNCH -> SYNCH
TERM | SYNCH -> SYNCH
TERM * SKIP -> SKIP
TERM / SKIP -> SKIP
TERM % SKIP -> SKIP
TERM' $ SKIP -> SKIP
TERM' id SKIP -> SKIP
TERM' ( SKIP -> SKIP
TERM' ) TERM' -> ssc
TERM' { SKIP -> SKIP
TERM' } SKIP -> SKIP
TERM' maimn SKIP -> SKIP
TERM' inmt SKIP -> SKIP
TERM' floamt SKIP -> SKIP
TERM' strinmg SKIP -> SKIP
TERM' chamr SKIP -> SKIP
TERM' booml SKIP -> SKIP
TERM' , SKIP -> SKIP
TERM' ; TERM' -> ssc
TERM' cimn SKIP -> SKIP
TERM' coumt SKIP -> SKIP
TERM' returmn SKIP -> SKIP
TERM' = SKIP -> SKIP
TERM' imf SKIP -> SKIP
TERM' imfel SKIP -> SKIP
TERM' whimle SKIP -> SKIP
TERM' int_literal SKIP -> SKIP
TERM' float_literal SKIP -> SKIP
TERM' char_literal SKIP -> SKIP
TERM' string_literal SKIP -> SKIP
TERM' trmue SKIP -> SKIP
TERM' falmse SKIP -> SKIP
TERM' < TERM' -> ssc
TERM' > TERM' -> ssc
TERM' <= TERM' -> ssc
TERM' >= TERM' -> ssc
TERM' == TERM' -> ssc
TERM' != TERM' -> ssc
TERM' & TERM' -> ssc
TERM' | TERM' -> ssc
TERM' ! SKIP -> SKIP
TERM' + TERM' -> ssc
TERM' - TERM' -> ssc
TERM' ^ TERM' -> ssc
TERM' & TERM' -> ssc
TERM' | TERM' -> ssc
TERM' * TERM' -> * FACTOR TERM'
TERM' / TERM' -> / FACTOR TERM'
TERM' % TERM' -> % FACTOR TERM'
FACTOR $ SKIP -> SKIP
FACTOR id FACTOR -> id
FACTOR ( SKIP -> SKIP
FACTOR ) SYNCH -> SYNCH
FACTOR { SKIP -> SKIP
FACTOR } SKIP -> SKIP
FACTOR maimn SKIP -> SKIP
FACTOR inmt SKIP -> SKIP
FACTOR floamt SKIP -> SKIP
FACTOR strinmg SKIP -> SKIP
FACTOR chamr SKIP -> SKIP
FACTOR booml SKIP -> SKIP
FACTOR , SKIP -> SKIP
FACTOR ; SYNCH -> SYNCH
FACTOR cimn SKIP -> SKIP
FACTOR coumt SKIP -> SKIP
FACTOR returmn SKIP -> SKIP
FACTOR = SKIP -> SKIP
FACTOR imf SKIP -> SKIP
FACTOR imfel SKIP -> SKIP
FACTOR whimle SKIP -> SKIP
FACTOR int_literal FACTOR -> LITERAL
FACTOR float_literal FACTOR -> LITERAL
FACTOR char_literal FACTOR -> LITERAL
FACTOR string_literal FACTOR -> LITERAL
FACTOR trmue FACTOR -> LITERAL
FACTOR falmse FACTOR -> LITERAL
FACTOR < SYNCH -> SYNCH
FACTOR > SYNCH -> SYNCH
FACTOR <= SYNCH -> SYNCH
FACTOR >= SYNCH -> SYNCH
FACTOR == SYNCH -> SYNCH
FACTOR != SYNCH -> SYNCH
FACTOR & SYNCH -> SYNCH
FACTOR | SYNCH -> SYNCH
FACTOR ! SKIP -> SKIP
FACTOR + SYNCH -> SYNCH
FACTOR - SYNCH -> SYNCH
FACTOR ^ SYNCH -> SYNCH
FACTOR & SYNCH -> SYNCH
FACTOR | SYNCH -> SYNCH
FACTOR * SYNCH -> SYNCH
FACTOR / SYNCH -> SYNCH
FACTOR % SYNCH -> SYNCH
